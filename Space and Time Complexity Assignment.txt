1. Analyze the time complexity of the following java code and suggest a way to improve it:
   int sum = 0;
   for(int i = 1; i <= n; i++){
    for(int j = 1; j <= i; j++){
     sum++;
    }
   }
Ans. In this question two nested loops are used that's why the time complexity is O(n^2).
     Basically in this code we add the natural number from 1 to n and store in the sum variable so we can improve this code in terms of time 
     complexity by using the expression or mathematical formula of finding the addition of first natural numbers. Like : 
    
     int sum = n*(n+1)/2;  // n is the natural number

     so in that case the time complexity becomes to O(1) that is linear time complexity and more better than O(n^2).

2. Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n, given that T(0) = 5. 
Ans. T(n) = 3T(n-1) + 12n
     when n = 2,
              T(2) = 3T(1) + 12*2    ---eq (1)
     when n = 1,
              T(1) = 3T(0) + 12*1    {given T(0) = 5}
              T(1) = 3*5 + 12 = 27
      
     put T(1) in eq (1) -
              T(2) = 3*27 + 24 = 108
    so T(2) = 105

3. Given a recurrence relation, solve it using a substitution method. 
        Relation : T(n) = T(n - 1) + c 
Ans. Given,
          T(n) = T(n-1) + c    ---eq(1)
          put n = (n-1)
          T(n-1) = T(n-2) + c
          put in eq(1)-
          T(n) = T(n-2) + 2*c
          put n = n-2 in eq(1)-
          T(n-2) = T(n-3) + c
          so, T(n) = T(n-3) + 3*c
          After k times-
              T(n) = T(n-k) + (k+1)*c       ---standard equation
              n-k = 1 => k = n-1
          put k = n-1 in standard equation
           T(n) = T(n-n+1) + (n-1+1)*c
           T(n) = T(1) + n*c
           T(n) = 1 + n*c
         so the Time Complexity is O(n).

4. Given a recurrence relation: 
              T(n) = 16T(n/4) + n2logn 
    Find the time complexity of this relation using the master theorem.
Ans. According to master's theorem : 
                         T(n) = aT(n/b) + n^k(log^p n)
                         compare with equation : a = 16, b = 4, k = 2, p = 1
                          b^k = a and p > -1 that's why,
                              T(n) = O(n^log16 base 4 log^2 n)
                              Time Complexity is : O(n^2 log^2 n)

5. Solve the following recurrence relation using recursion tree method T(n) = 2T(n/2) + n.
Ans. 1st step : n is broken in n/2 and n/2 and cost in this step is n.
     2nd step : each both n/2 are broken in n/2^2 and n/2^2 and cost in this step is n.
     3rd step : each n/2^2 are broken in n/2^3 and n/2^3 and cost in this step is n.
      ------
     kth step : each term is broken in n/2^k and n/2^k and cost in this step is again n.

     so n/2^k = 1 => n = 2^k
             k = logn base 2
        T(n) = (n+n+...+logn base 2 times)
        T(n) = n(1+1+...+logn base 2 times)
        T(n) = n*(logn base 2)
      so, Time complexity is O(n*logn base 2).

6.  T(n) = 2T(n/2) + K, Solve using Recurrence tree method.
Ans. 1st step : n is broken in n/2 and n/2 and cost in this step is 2^0 * k.
     2nd step : each both n/2 are broken in n/2^2 and n/2^2 and cost in this step is 2^1 * k.
     3rd step : each n/2^2 are broken in n/2^3 and n/2^3 and cost in this step is 2^2 * k.
      ------
     cth step : each term is broken in n/2^c and n/2^c and cost in this step is again 2^c * k.

     so n/2^c = 1 => n = 2^c
             c = logn base 2
        T(n) = (2^0 * k+2^1 * k+...+2^c * k)
        T(n) = k(2^0+2^1+...+logn base 2 times)
        T(n) = k*(1(2^logn base 2 - 1)/(2-1)) => k*(n^log2 base 2 - 1)
        T(n) = nk - k
      so, Time complexity is O(n).